---
interface Props {
  isOpen: boolean;
}

const { isOpen } = Astro.props;
---

<div id="addFeedModal" class={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center ${isOpen ? '' : 'hidden'}`}>
  <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl w-full max-w-md">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Add New Feed</h2>
      <button id="closeModal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <form id="addFeedForm" class="space-y-4">
      <div>
        <label for="feedUrl" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Feed URL</label>
        <input
          type="url"
          id="feedUrl"
          name="feedUrl"
          required
          pattern="https?://.+"
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          placeholder="https://example.com/feed.xml"
        />
      </div>
      <div class="flex justify-end">
        <button
          type="submit"
          class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
        >
          Add Feed
        </button>
      </div>
    </form>
  </div>
</div>

<script is:inline define:vars={{ API_BASE_URL: import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:8080' }}>
  (async () => {
    // Define notification functions
    function showNotification(type, message) {
      const notification = document.createElement('div');
      notification.innerHTML = `
        <div class="fixed bottom-4 right-4 z-50">
          <div class="p-4 rounded-lg shadow-lg ${
            type === 'success' ? 'bg-green-500' : 'bg-red-500'
          } text-white">
            ${message}
          </div>
        </div>
      `;
      document.body.appendChild(notification);

      // Auto-hide after 2 seconds
      setTimeout(() => {
        notification.remove();
      }, 2000);
    }

    function getErrorMessage(status) {
      switch (status) {
        case 400:
          return 'Invalid request. Please check your input and try again.';
        case 401:
          return 'Unauthorized. Please check your credentials.';
        case 403:
          return 'Forbidden. You do not have permission to perform this action.';
        case 404:
          return 'Resource not found. Please check the URL and try again.';
        case 409:
          return 'Conflict. This feed might already exist.';
        case 500:
          return 'Server error. Please try again later.';
        default:
          return 'An unexpected error occurred. Please try again.';
      }
    }

    const modal = document.getElementById('addFeedModal');
    const closeButton = document.getElementById('closeModal');
    const form = document.getElementById('addFeedForm');

    // Define API endpoints for client-side use
    const API_ENDPOINTS = {
      feeds: {
        create: `${API_BASE_URL}/api/feeds`
      }
    };

    function closeModal() {
      modal?.classList.add('hidden');
    }

    closeButton?.addEventListener('click', closeModal);

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const urlInput = document.getElementById('feedUrl');
      const feedUrl = urlInput?.value.trim();
      
      if (!feedUrl) {
        showNotification('error', 'Please enter a valid feed URL');
        return;
      }

      try {
        console.log('Sending request to:', API_ENDPOINTS.feeds.create);
        console.log('With data:', { feedUrl });

        const response = await fetch(API_ENDPOINTS.feeds.create, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ feedUrl })
        });

        console.log('Response status:', response.status);
        console.log('Response headers:', Object.fromEntries(response.headers.entries()));

        if (!response.ok) {
          const errorMessage = getErrorMessage(response.status);
          console.error('Error response:', errorMessage);
          showNotification('error', errorMessage);
          return;
        }

        const data = await response.json();
        console.log('Success response:', data);

        showNotification('success', 'Feed added successfully!');
        closeModal();
        window.location.reload();
      } catch (error) {
        console.error('Error adding feed:', error);
        if (error instanceof Error) {
          showNotification('error', error.message);
        } else {
          showNotification('error', 'An unexpected error occurred');
        }
      }
    });
  })();
</script> 