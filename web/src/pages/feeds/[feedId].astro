---
import { GLOBAL } from "../../lib/variables";
import Layout from "../../layouts/Layout.astro";
import ArticleList from "../../components/articles/ArticleList.astro";
import Section from "../../components/common/Section.astro";
import type { Article } from "../../lib/samples/articles";
import { API_ENDPOINTS } from "../../lib/config";

// Define the paths that should be generated at build time
export async function getStaticPaths() {
  // Fetch all feeds to get their IDs
  const response = await fetch(API_ENDPOINTS.feeds.list, {
    method: 'GET',
    headers: {
      'Accept': 'application/json'
    }
  });

  if (!response.ok) {
    throw new Error('Failed to fetch feeds');
  }

  const { feeds } = await response.json();

  // Return an array of paths to generate
  return feeds.map((feed: { id: string }) => ({
    params: { feedId: feed.id }
  }));
}

const { feedId } = Astro.params;

// Fetch articles for this feed
const response = await fetch(`${API_ENDPOINTS.articles.feed}/${feedId}`, {
  method: 'GET',
  headers: {
    'Accept': 'application/json'
  }
});

if (!response.ok) {
  throw new Error(`Failed to fetch articles for feed ${feedId}`);
}

const { articles } = await response.json();
---

<Layout>
  <Fragment slot="head">
    <title>Feed Articles â€¢ {GLOBAL.projectTitle}</title>
    <meta
      name="description"
      content={`Articles from feed ${feedId}`}
    />
  </Fragment>
  <Section>
    <ArticleList articles={articles} />
  </Section>
</Layout>

<script>
  // Define API endpoints for client-side use
  const API_ENDPOINTS = {
    articles: {
      feed: 'http://localhost:8080/api/articles'
    }
  };

  // Format date function
  function formatDate(dateString: string | undefined) {
    if (!dateString) {
      return 'No date available';
    }
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      return 'Invalid Date';
    }
  }

  // Get the feedId from the URL
  const currentFeedId = window.location.pathname.split('/').pop();

  // Client-side fetch to update articles
  async function fetchArticles() {
    try {
      const response = await fetch(`${API_ENDPOINTS.articles.feed}/${currentFeedId}`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch articles');
      }
      
      const { articles: apiArticles } = await response.json();
      
      // Update the articles list in the UI
      const articleList = document.querySelector('.grid');
      if (articleList) {
        articleList.innerHTML = apiArticles.map((article: Article) => `
          <article class="w-[600px] h-32 mx-auto bg-white dark:bg-gray-800 rounded-lg shadow p-4">
            <div class="h-full flex flex-col items-center justify-center text-center">
              <h3 class="text-xl font-semibold line-clamp-2">
                <a 
                  href="${article.link}" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="hover:text-blue-500 dark:hover:text-blue-400"
                >
                  ${article.title}
                </a>
              </h3>
              <p class="text-gray-600 dark:text-gray-400">
                ${formatDate(article.date)}
              </p>
            </div>
          </article>
        `).join('');
      }
    } catch (error) {
      console.error('Error fetching articles:', error);
      // Show error message in the UI
      const articleList = document.querySelector('.grid');
      if (articleList) {
        articleList.innerHTML = `
          <div class="text-center py-12">
            <p class="text-red-500">Failed to load articles. Please try again later.</p>
          </div>
        `;
      }
    }
  }

  // Fetch articles when the page loads
  document.addEventListener('DOMContentLoaded', fetchArticles);
</script> 